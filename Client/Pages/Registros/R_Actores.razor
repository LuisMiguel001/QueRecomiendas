@page "/R_actores"
@page "/R_actores/{ActorId:int}"
@inject HttpClient httpClient

<EditForm Model="actor" OnValidSubmit="GuardarActor">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">

			@*Encabezado*@
			<div class="card-header">
				<h3 class="card align-items-center">Registrar Actores</h3>
			</div>

			<div class="card-body">
				@*Buscar*@
				<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
					<div class="input-group mb-3">
						<span class="input-group-text">Buscar</span>
						<InputNumber @bind-Value="actor.ActorId" class="form-control" aria-describedby="buscarButton" />
						<button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="buscarButton">
							<i class="oi oi-magnifying-glass" />
						</button>
					</div>
				</div>

				<div class="mb-3">
					<div class="mb-3">
						<div class="input-group">
							<InputFile OnChange="OnChange" class="form-control" accept=".png, .jpg, .jpeg" />
						</div>
						<ValidationMessage For="@(() => actor.Foto)" />
					</div>
					@if (actor.Foto != null)
					{
						var base64 = Convert.ToBase64String(actor.Foto);
						var imgSrc = $"data:image/jpeg;base64,{base64}";
						<img src="@imgSrc" alt="Imagen de la película" class="img-fluid" style="width: 125px; height: 125px; margin-right: 20px;" />
					}
				</div>
				<div class="row">
					<div class="col-md-8">
						<div class="form-group">
							<div class="input-group">
								<span class="input-group-text">Nombre</span>
								<InputText id="nombre" @bind-Value="actor.Nombre" class="form-control" placeholder="Nombre del Actor" />
							</div>
							<ValidationMessage For="@(() => actor.Nombre)" />
						</div>
					</div>

					<div class="col-md-4">
						<div class="form-group">
							<div class="input-group">
								<span class="input-group-text">Fecha de Nacimiento</span>
								<InputDate id="fechaNacimiento" @bind-Value="actor.FechaNacimiento" class="form-control" />
							</div>
							<ValidationMessage For="@(() => actor.FechaNacimiento)" />
						</div>
					</div>
				</div>

				<br>

				<div class="mb-3">
					<div Class="form-group">
						<div class="input-group">
							<span class="input-group-text">Biograf&iacute;a</span>
							<InputTextArea id="biografia" @bind-Value="actor.Biografia" class="form-control" placeholder="Biograf&iacute;a del Actor" />
						</div>
						<ValidationMessage For="@(() => actor.Biografia)" />
						@if (!string.IsNullOrWhiteSpace(actor.Biografia) && ContadorPalabra(actor.Biografia) < 150)
						{
							<div class="text-danger">La Biograf&iacute;a debe tener al menos 150 palabras.</div>
						}
					</div>
				</div>

				<div class="card-footer d-flex justify-content-center">
					<div class="btn-group" role="group">
						<button type="button" class="btn btn-outline-primary" @onclick="Nuevo"> <i class="oi oi-file" /> Nuevo</button>
						<button type="submit" class="btn btn-outline-success"> <i class="oi oi-document" /> Guardar</button>
						<button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><i class="io io-trash" /> Eliminar</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</EditForm>

@code {
	[Parameter]
	public int ActorId { get; set; }

	private Actores actor = new Actores();

	protected override async Task OnInitializedAsync()
	{
		if (ActorId > 0)
		{
			this.actor.ActorId = ActorId;
			await Buscar();
		}
	}

	async Task OnChange(InputFileChangeEventArgs e)
	{
		var archivo = e.File;
		var buffer = new byte[archivo.Size];

		await archivo.OpenReadStream().ReadAsync(buffer);
		actor.Foto = buffer;
	}

	private async Task GuardarActor()
	{
		try
		{
			if (ValidarDatosActor())
			{
				var response = await httpClient.PostAsJsonAsync("api/Actores", actor);

				if (response.IsSuccessStatusCode)
				{
					actor = new Actores();
				}
				else
				{
					var errorMessage = await response.Content.ReadAsStringAsync();
					Console.WriteLine($"Error al guardar el actor: {errorMessage}");
				}
			}
			else
			{
				Console.WriteLine("Los datos del actor no son válidos. Por favor, verifica los campos.");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error al intentar guardar el actor: {ex.Message}");
		}
	}

	public async Task Buscar()
	{
		var actorEncotrado = await httpClient.GetFromJsonAsync<Actores>($"api/Actores/{actor.ActorId}");

		if (actorEncotrado != null)
		{
			this.actor = actorEncotrado;
			StateHasChanged();
		}
		else
		{
			//notificationService.ShowNotification(
			//		titulo: "Error de búsqueda",
			//		mensaje: "Registro no encontrado",
			//		NotificationSeverity.Error
			//);
		}
	}

	public void Nuevo()
	{
		this.actor = new Actores();
	}

	public async Task Eliminar()
	{
		using var response = await httpClient.DeleteAsync($"api/Actores/{actor.ActorId}");

		if (!response.IsSuccessStatusCode)
		{
			//notificationService.ShowNotification(
			//	titulo: "Error!",
			//	mensaje: "No se pudo eliminar!",
			//	NotificationSeverity.Error
			//);
			return;
		}
		else
		{
			Nuevo();
			//notificationService.ShowNotification(
			//	titulo: "Eliminado",
			//	mensaje: "Se ha eliminado Correctamente",
			//	NotificationSeverity.Success
			//);
		}
	}

	private bool ValidarDatosActor()
	{
		return !string.IsNullOrEmpty(actor.Nombre);
	}

	private int ContadorPalabra(string text)
	{
		var Contandor = text.Split(new[] { ' ', '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries).Length;
		return Contandor;
	}
}
