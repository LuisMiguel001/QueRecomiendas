@page "/R_actores"
@page "/R_actores/{ActorId:int}"
@using Microsoft.AspNetCore.Authorization;
@inject NotificationService notificationService
@attribute [Authorize(Roles = "Administrador")]
@inject HttpClient httpClient

<EditForm Model="actor" OnValidSubmit="GuardarActor">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">

			@*Encabezado*@
			<div class="card-header">
				<h3 class="card align-items-center">Registrar Actores</h3>
			</div>

			<div class="card-body">
				@*Buscar*@
				<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
					<div class="input-group mb-3">
						<span class="input-group-text">Buscar</span>
						<InputNumber @bind-Value="actor.ActorId" class="form-control" aria-describedby="buscarButton" Min="0" />
						<button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="buscarButton">
							<i class="oi oi-magnifying-glass" />
						</button>
					</div>
				</div>

				<div class="mb-3">
					<div class="mb-3">
						<div class="input-group">
							<InputFile OnChange="OnChange" class="form-control" accept=".png, .jpg, .jpeg" />
						</div>
						<ValidationMessage For="@(() => actor.Foto)" />
					</div>
					@if (actor.Foto != null)
					{
						var base64 = Convert.ToBase64String(actor.Foto);
						var imgSrc = $"data:image/jpeg;base64,{base64}";
						<img src="@imgSrc" alt="Imagen de la película" class="img-fluid" style="width: 125px; height: 125px; margin-right: 20px;" />
					}
				</div>
				<div class="row">
					<div class="col-md-8">
						<div class="form-group">
							<div class="input-group">
								<span class="input-group-text">Nombre</span>
								<InputText id="nombre" @bind-Value="actor.Nombre" class="form-control" placeholder="Nombre del Actor" />
							</div>
							<ValidationMessage For="@(() => actor.Nombre)" />
						</div>
					</div>

					<div class="col-md-4">
						<div class="form-group">
							<div class="input-group">
								<span class="input-group-text">Fecha de Nacimiento</span>
								<InputDate id="fechaNacimiento" @bind-Value="actor.FechaNacimiento" class="form-control" />
							</div>
							<ValidationMessage For="@(() => actor.FechaNacimiento)" />
							@if (actor.FechaNacimiento > DateTime.Today)
							{
								<div class="text-danger">La fecha no puede ser superior a la de hoy</div>
							}
						</div>
					</div>
				</div>

				<br>

				<div class="mb-3">
					<div Class="form-group">
						<div class="input-group">
							<span class="input-group-text">Biograf&iacute;a</span>
							<InputTextArea id="biografia" @bind-Value="actor.Biografia" class="form-control" placeholder="Biograf&iacute;a del Actor" />
						</div>
						<ValidationMessage For="@(() => actor.Biografia)" />
						@if (!string.IsNullOrWhiteSpace(actor.Biografia) && ContadorPalabra(actor.Biografia) < 50)
						{
							<div class="text-danger">La Biograf&iacute;a debe tener al menos 50 palabras.</div>
						}
					</div>
				</div>
				<div class="modal fade show" style="display: @(mostrarConfirmacionEliminar ? "block" : "none")" tabindex="-1" role="dialog">
					<div class="modal-dialog modal-dialog-centered" role="document">
						<div class="modal-content" style="border: 3px solid black; background-color: #CC0000; color: yellow;">
							<div class="modal-header">
								<h5 class="modal-title text-center mx-auto"><i class="fas fa-exclamation-triangle text-warning"></i>⚠️Advertencia⚠️</h5>
								<button type="button" @onclick="CerrarConfirmacionEliminar" class="close" data-dismiss="modal" aria-label="Close">
									<span aria-hidden="true">&times;</span>
								</button>
							</div>
							<div class="modal-body text-center">
								<h4 style="font-size: 18px; color: yellow">¿Está seguro de que desea eliminar la película?</h4>
								<h4 style="font-size: 16px; color: yellow;">Esta acción no se puede deshacer.</h4>
							</div>
							<div class="modal-footer justify-content-center">
								<button type="button" class="btn btn-warning" @onclick="CerrarConfirmacionEliminar" style="background-color: grey; border-color: black; color: #fff;" data-dismiss="modal"><i class="fas fa-times"></i> Cancelar</button>
								<button type="button" class="btn btn-outline-danger" @onclick="Eliminar" style="background-color: #ff0000; border-color: black; color: #fff;"><i class="fas fa-trash-alt"></i> Eliminar</button>
							</div>
						</div>
					</div>
				</div>
				<div class="card-footer d-flex justify-content-center">
					<div class="btn-group" role="group">
						<button type="button" class="btn btn-outline-primary" @onclick="Nuevo"> <i class="oi oi-file" /> Nuevo</button>
						<button type="submit" class="btn btn-outline-success"> <i class="oi oi-document" /> Guardar</button>
						<button type="button" class="btn btn-outline-danger" @onclick="MostrarConfirmacionEliminar"><i class="io io-trash" /> Eliminar</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</EditForm>

@code {
	[Parameter]
	public int ActorId { get; set; }
	private Actores actor = new Actores();
	private bool mostrarConfirmacionEliminar = false;

	protected override async Task OnInitializedAsync()
	{
		if (ActorId > 0)
		{
			this.actor.ActorId = ActorId;
			await Buscar();
		}
	}

	async Task OnChange(InputFileChangeEventArgs e)
	{
		var archivo = e.File;
		var buffer = new byte[archivo.Size];

		await archivo.OpenReadStream().ReadAsync(buffer);
		actor.Foto = buffer;
	}

	private async Task GuardarActor()
	{
		if (Validar())
		{
			var response = await httpClient.PostAsJsonAsync("api/Actores", actor);

			if (response.IsSuccessStatusCode)
			{
				notificationService.ShowNotification(
					titulo: "Exito!",
					mensaje: "Se Guardo Correctamente!",
					NotificationSeverity.Success
				);
				Nuevo();
			}
			else
			{
				var errorMessage = await response.Content.ReadAsStringAsync();
				notificationService.ShowNotification(
					titulo: "Error!",
					mensaje: "No se pudo guardar!",
					NotificationSeverity.Error
				);
			}
		}
		else
		{
			notificationService.ShowNotification(
					titulo: "Verificar!",
					mensaje: "Algo salio mal al guardar",
					NotificationSeverity.Error
				);
		}
	}

	public async Task Buscar()
	{
		try
		{
			var actorEncotrado = await httpClient.GetFromJsonAsync<Actores>($"api/Actores/{actor.ActorId}");

			if (actorEncotrado != null)
			{
				this.actor = actorEncotrado;
				StateHasChanged();
			}
			else
			{
				notificationService.ShowNotification(
						titulo: "Error de Búsqueda",
						mensaje: "Actor no Encontrado",
						NotificationSeverity.Error
				);
			}
		}
		catch (Exception ex)
		{
			notificationService.ShowNotification(
				titulo: "Error de Búsqueda",
				mensaje: "Actor no Encontrado",
				NotificationSeverity.Error
			);
		}
	}

	public void Nuevo()
	{
		this.actor = new Actores();
	}

	public async Task Eliminar()
	{
		using var response = await httpClient.DeleteAsync($"api/Actores/{actor.ActorId}");

		if (!response.IsSuccessStatusCode)
		{
			notificationService.ShowNotification(
				titulo: "Error!",
				mensaje: "No se puede eliminar!",
				NotificationSeverity.Error
			);
			return;
		}
		else
		{
			Nuevo();
			notificationService.ShowNotification(
				titulo: "Eliminado",
				mensaje: "Se ha eliminado Correctamente",
				NotificationSeverity.Success
			);
		}
	}

	public void MostrarConfirmacionEliminar()
	{
		mostrarConfirmacionEliminar = true;
	}

	public void CerrarConfirmacionEliminar()
	{
		mostrarConfirmacionEliminar = false;
	}

	public bool Validar()
	{
		if (!string.IsNullOrWhiteSpace(actor.Biografia) && ContadorPalabra(actor.Biografia) < 50)
		{
			return false;
		}
		if (actor.FechaNacimiento > DateTime.Today)
		{
			return false;
		}
		return true;
	}

	private int ContadorPalabra(string text)
	{
		var Contandor = text.Split(new[] { ' ', '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries).Length;
		return Contandor;
	}
}
