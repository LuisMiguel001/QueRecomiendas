@page "/c_pelicula"
@inject HttpClient httpClient
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]

<div class="card">
    <div class="card-header">
        <h3 class="card align-items-center">Movies</h3>
    </div>
    <style>
        .red-card {
            --card-background-color: #ff0000;
            --card-text-color: #ffffff;
            background-color: var(--card-background-color);
            color: var(--card-text-color);
            width: 230px;
            height: 350px;
        }
    </style>
    <div class="card-body">

        <h4>En Carteleras</h4>
        @if (Pelicula is not null)
        {
            <div class="row">
                @foreach (var pelicula in PeliculaPasadas)
                {
                    <div class="col-md-4 mb-4">
                        <div class="card red-card" style="background-color: @ColorFondo; color: @TextColor;">
                            <div class="card-body text-center">
                                @if (pelicula.Imagen != null)
                                {
                                    var base64 = Convert.ToBase64String(pelicula.Imagen);
                                    var imgSrc = $"data:image/jpeg;base64,{base64}";
                                    <img src="@imgSrc" alt="Imagen de la película" class="img-fluid" style="width: 225px; height: 315px; margin-right: 20px;" />
                                }
                            </div>
                            <div class="align-content-center">
                                <div class="text-center">
                                    <a href="ver/@pelicula.PeliculaId" class="card-title">@pelicula.Titulo</a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <h4>Pr&oacute;ximos Estrenos</h4>
            <div class="row">
                @foreach (var pelicula in PeliculaFuturas)
                {
                    <div class="col-md-4 mb-4">
                        <div class="card red-card" style="background-color: @ColorFondo; color: @TextColor;">
                            <div class="card-body text-center">
                                @if (pelicula.Imagen != null)
                                {
                                    var base64 = Convert.ToBase64String(pelicula.Imagen);
                                    var imgSrc = $"data:image/jpeg;base64,{base64}";
                                    <img src="@imgSrc" alt="Imagen de la película" class="img-fluid" style="width: 225px; height: 315px; margin-right: 20px;" />
                                }
                            </div>
                            <div class="align-content-center">
                                <div class="text-center">
                                    <a href="ver/@pelicula.PeliculaId" class="card-title">@pelicula.Titulo</a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

	<div class="card-footer">
		<div class="form-row justify-content-sm-between" aria-orientation="vertical">
			<div class="col-3">
				<label for="CantidaRegistro" class="col-form-label"><strong>Post</strong>&nbsp;</label>
				<input id="CantidaRegistro" @bind-value="@conteo" disabled class="form-control" />
			</div>
		</div>
	</div>
</div>

@code {
	public string? FiltroTitulo { get; set; }
	public DateTime? FiltroFecha { get; set; }

	public List<Peliculas>? Pelicula { get; set; }
	public int conteo { get; set; }
	public DateTime? FechaInicio { get; set; }
	public DateTime? FechaFin { get; set; }

	private string ColorFondo { get; set; }
	private string TextColor { get; set; }

	public List<Peliculas> PeliculaPasadas { get; set; }
	public List<Peliculas> PeliculaFuturas { get; set; }

	protected override async Task OnInitializedAsync()
	{
		CambiarColores();
		await Buscar();
	}

	private void CambiarColores()
	{
		Random random = new Random();
		ColorFondo = $"#{random.Next(0x1000000):X6}";
		TextColor = "#ffffff";
	}

	public void VaciarCampos()
	{
		FiltroTitulo = "";
		FechaInicio = DateTime.MinValue;
		FechaFin = DateTime.MinValue;
	}

	public async Task Buscar()
	{
		Pelicula = await httpClient.GetFromJsonAsync<List<Peliculas>>($"api/Peliculas");

		if (Pelicula != null)
		{
			DateTime fechaHoy = DateTime.Now.Date;

			PeliculaPasadas = Pelicula
				.Where(p => p.FechaEstreno.Date < fechaHoy)
				.ToList();

			PeliculaFuturas = Pelicula
				.Where(p => p.FechaEstreno.Date >= fechaHoy)
				.ToList();
		}

		conteo = Pelicula != null ? Pelicula.Count() : 0;
		StateHasChanged();
	}
}
