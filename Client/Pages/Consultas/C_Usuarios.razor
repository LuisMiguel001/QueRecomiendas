@page "/c_usuarios"
@inject HttpClient httpClient
@inject NavigationManager navManager
@inject NotificationService notificationService
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Administrador")]

<div class="container">
	<div class="card shadow-lg">

		@*Encabezado*@
		<div class="card-header">
			<h3 class="card align-items-center">Usuarios Registrados</h3>
		</div>

		<div class="card-body">
			@*Buscar*@
			<div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
				<div class="input-group mb-3">
					<span class="input-group-text">Buscar</span>
					<InputNumber @bind-Value="usuarioIdBusqueda" class="form-control" aria-describedby="buscarButton" Min="0" />
					<button @onclick="BuscarPorId" class="btn btn-outline-primary" type="button" id="buscarButton">
						<i class="oi oi-magnifying-glass" />
					</button>
					<button @onclick="LimpiarBusqueda" class="btn btn-outline-secondary" type="button">
						<i class="oi oi-trash" />
					</button>
				</div>
			</div>

			<table class="table">
				<thead>
					<tr>
						<th>ID</th>
						<th>Correo</th>
						<th>Clave</th>
						<th>Acciones</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var usuario in Usuarios)
					{
						<tr>
							<td>@usuario.UsuarioId</td>
							<td>@usuario.Correo</td>
							<td>@usuario.Clave</td>
							<td>
								<button class="btn btn-outline-danger" @onclick="() => ConfirmarEliminarUsuario(usuario.UsuarioId)">Eliminar</button>
								<button class="btn btn-outline-primary" @onclick="() => EditarUsuario(usuario.UsuarioId)">Editar</button>
							</td>
						</tr>
					}
				</tbody>
			</table>

			@if (usuario != null)
			{
				<h4>Editar Usuario</h4>
				<form>
					<div class="form-group">
						<label for="correo">Correo:</label>
						<input type="email" class="form-control" id="correo" @bind="usuario.Correo" />
					</div>
					<div class="form-group">
						<label for="clave">Clave:</label>
						<input type="password" class="form-control" id="clave" @bind="usuario.Clave" />
					</div>

					<br>

					<button type="button" class="btn btn-outline-primary" @onclick="GuardarCambios">Guardar Cambios</button>

					<button type="button" class="btn btn-outline-secondary" @onclick="CancelarEdicion">Cancelar</button>
				</form>
			}
		</div>
	</div>
</div>

<div class="modal fade show" style="display: @(mostrarConfirmacionEliminar ? "block" : "none")" tabindex="-1" role="dialog">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content" style="border: 3px solid black; background-color: #CC0000; color: yellow;">
			<div class="modal-header">
				<h5 class="modal-title text-center mx-auto"><i class="fas fa-exclamation-triangle text-warning"></i>⚠️Advertencia⚠️</h5>
				<button type="button" @onclick="CancelarEliminarUsuario" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body text-center">
				<h4 style="font-size: 18px; color: yellow">¿Está seguro de que desea eliminar la película?</h4>
				<h4 style="font-size: 16px; color: yellow;">Esta acción no se puede deshacer.</h4>
			</div>
			<div class="modal-footer justify-content-center">
				<button type="button" class="btn btn-warning" @onclick="CancelarEliminarUsuario" style="background-color: grey; border-color: black; color: #fff;" data-dismiss="modal"><i class="fas fa-times"></i> Cancelar</button>
				<button type="button" class="btn btn-outline-danger" @onclick="EliminarUsuarioConfirmado" style="background-color: #ff0000; border-color: black; color: #fff;"><i class="fas fa-trash-alt"></i> Eliminar</button>
			</div>
		</div>
	</div>
</div>

@code {
	private List<Usuarios> Usuarios = new List<Usuarios>();
	private Usuarios usuario;
	private int usuarioIdBusqueda;
	private bool mostrarConfirmacionEliminar = false;
	private int usuarioIdAEliminar;

	protected override async Task OnInitializedAsync()
	{
		Usuarios = await httpClient.GetFromJsonAsync<List<Usuarios>>("/api/Usuarios");
	}

	private void ConfirmarEliminarUsuario(int usuarioId)
	{
		mostrarConfirmacionEliminar = true;
		usuarioIdAEliminar = usuarioId;
	}

	private void CancelarEliminarUsuario()
	{
		mostrarConfirmacionEliminar = false;
		usuarioIdAEliminar = 0;
	}

	private async void EliminarUsuarioConfirmado()
	{
		var response = await httpClient.DeleteAsync($"/api/Usuarios/{usuarioIdAEliminar}");

		if (response.IsSuccessStatusCode)
		{
			Usuarios = await httpClient.GetFromJsonAsync<List<Usuarios>>("/api/Usuarios");
			mostrarConfirmacionEliminar = false;
			StateHasChanged();
			notificationService.ShowNotification(
				titulo: "Éxito!",
				mensaje: "Se eliminó el usuario",
				NotificationSeverity.Success
			);
		}
		else
		{
			notificationService.ShowNotification(
				titulo: "Error!",
				mensaje: "Algo salió mal al eliminar",
				NotificationSeverity.Error
			);
		}
	}

	private void EditarUsuario(int usuarioId)
	{
		usuario = Usuarios.FirstOrDefault(u => u.UsuarioId == usuarioId);
	}

	private async void GuardarCambios()
	{
		usuario.Clave = BCrypt.Net.BCrypt.HashPassword(usuario.Clave);

		var response = await httpClient.PutAsJsonAsync($"/api/Usuarios/{usuario.UsuarioId}", usuario);

		if (response.IsSuccessStatusCode)
		{
			Usuarios = await httpClient.GetFromJsonAsync<List<Usuarios>>("/api/Usuarios");
			usuario = null;
			StateHasChanged();
			notificationService.ShowNotification(
						titulo: "Exito!",
						mensaje: "Se guardaron los cambios",
						NotificationSeverity.Success
					);
		}
		else
		{
			notificationService.ShowNotification(
				titulo: "Error!",
				mensaje: "Salio algo mal al guardar los cambios",
				NotificationSeverity.Error
			);
		}
	}

	private async void BuscarPorId()
	{
		try
		{
			var usuarioEncontrado = Usuarios.FirstOrDefault(u => u.UsuarioId == usuarioIdBusqueda);

			if (usuarioEncontrado != null)
			{
				Usuarios = new List<Usuarios> { usuarioEncontrado };
				StateHasChanged();
			}
			else
			{
				notificationService.ShowNotification(
					titulo: "Error de búsqueda",
					mensaje: "Usuario no encontrado",
					NotificationSeverity.Warning
				);
			}
		}
		catch (Exception ex)
		{
			notificationService.ShowNotification(
				titulo: "Error de Búsqueda",
				mensaje: "Usuario no Encontrado",
				NotificationSeverity.Warning
			);
		}
	}

	private async Task ActualizarListaUsuarios()
	{
		Usuarios = await httpClient.GetFromJsonAsync<List<Usuarios>>("/api/Usuarios");
	}

	private void LimpiarBusqueda()
	{
		usuarioIdBusqueda = 0;
		ActualizarListaUsuarios();
	}

	private void CancelarEdicion()
	{
		usuario = null;
	}
}
